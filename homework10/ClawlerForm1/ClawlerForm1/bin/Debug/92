<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>ocean.wen - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=2uJkpdACLVfstRQ7zeCFK19brTwKuDEaNBLgKz9nm3A" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=DwDRKMd1bmjnJZ4iQqrTCO9QLlYb6OZaUAzHoHIIihg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/ocean234/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/ocean234/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/ocean234/wlwmanifest.xml" />
    <script>
        var currentBlogId = 247421;
        var currentBlogApp = 'ocean234';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'CodingLife';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/ocean234/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/ocean234/">Ocean的博客</a>
</h1>
<h2>青春是种梦想，年轻是种态度</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/ocean234/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/ocean.wen">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/ocean234/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2020/03/21.html">2020年3月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/12320633.html">
    <span>
            <span>[置顶]</span>
        Spring扩展：替换IOC容器中的Bean组件 -- @Replace注解
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1、背景： 工作中是否有这样的场景？一个软件系统会同时存在多个不同版本，比如我现在做的IM系统，同时又作为公司的技术输出给其他银行，不同的银行有自己的业务实现（登陆验证、用户信息查询等）。或者你的工程里依赖了其他第三方的jar，这些jar包里的组件都是通过Spring容器来管理的，如果你想修改某个类        <a href="https://www.cnblogs.com/ocean234/p/12320633.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-21 23:59
ocean.wen
<span data-post-id="12320633" class="post-view-count">阅读(2477)</span> 
<span data-post-id="12320633" class="post-comment-count">评论(2)</span> 
<span data-post-id="12320633" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12320633" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2019/01/03.html">2019年1月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/9663255.html">
    <span>
            <span>[置顶]</span>
        拯救老旧工程，记桥接SpringMVC与Stripes框架
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1、背景： 公司基础设施部门推出了自己的微服务框架（以下简称M），要求所有业务应用都要接入进去，但坑爹的是M只提供了SpringMVC工程的support，对于采用Stripes作为MVC框架的应用并不支持，所以就必须重构这个Stripes应用。 M虽然代替Tomcat自己实现了IO，工作线程池，服        <a href="https://www.cnblogs.com/ocean234/p/9663255.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-01-03 20:16
ocean.wen
<span data-post-id="9663255" class="post-view-count">阅读(584)</span> 
<span data-post-id="9663255" class="post-comment-count">评论(2)</span> 
<span data-post-id="9663255" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9663255" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2021/05/07.html">2021年5月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/14721131.html">
    <span>
        Spring SPI 机制总结
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：##1、概念： SPI(Service Provider Interface)服务提供接口，简单来说就是用来解耦，实现插件的自由插拔，具体实现方案可参考JDK里的ServiceLoader（加载classpath下所有META-INF/services/目录下的对应给定接口包路径的文件，然后通过反射        <a href="https://www.cnblogs.com/ocean234/p/14721131.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-07 20:27
ocean.wen
<span data-post-id="14721131" class="post-view-count">阅读(54)</span> 
<span data-post-id="14721131" class="post-comment-count">评论(0)</span> 
<span data-post-id="14721131" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14721131" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2021/05/06.html">2021年5月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/11082757.html">
    <span>
        Servlet与Netty横向对比
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：为什么要把这两个看起来不是很搭的东西放在一起对比呢？首先它们两个都是网络编程框架和规范，而且通过我的观察，从API的设计、生命周期方法、处理流程等等方面，他们确实有太多相似的地方了，如果想要深入地学习Netty，那么对比着Servlet，一定能让你事半功倍。 Servlet定义 首先，广义上的Ser        <a href="https://www.cnblogs.com/ocean234/p/11082757.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2021-05-06 11:28
ocean.wen
<span data-post-id="11082757" class="post-view-count">阅读(253)</span> 
<span data-post-id="11082757" class="post-comment-count">评论(0)</span> 
<span data-post-id="11082757" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11082757" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2020/12/08.html">2020年12月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/14105341.html">
    <span>
        Netty实现WebSocket，URI参数问题
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1、问题： Netty对WebSocket提供了很好的支持，在pipeline里添加一个WebSocketServerProtocolHandler就可以方便的暴露一个ws接口出去。但是，开发中却遇到一点小问题，需要在ws的URI带上参数queryString（如：/im/ws?w=22110023        <a href="https://www.cnblogs.com/ocean234/p/14105341.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-12-08 21:15
ocean.wen
<span data-post-id="14105341" class="post-view-count">阅读(302)</span> 
<span data-post-id="14105341" class="post-comment-count">评论(0)</span> 
<span data-post-id="14105341" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14105341" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2020/03/21.html">2020年3月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/12320633.html">
    <span>
        Spring扩展：替换IOC容器中的Bean组件 -- @Replace注解
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1、背景： 工作中是否有这样的场景？一个软件系统会同时存在多个不同版本，比如我现在做的IM系统，同时又作为公司的技术输出给其他银行，不同的银行有自己的业务实现（登陆验证、用户信息查询等）。或者你的工程里依赖了其他第三方的jar，这些jar包里的组件都是通过Spring容器来管理的，如果你想修改某个类        <a href="https://www.cnblogs.com/ocean234/p/12320633.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-21 23:59
ocean.wen
<span data-post-id="12320633" class="post-view-count">阅读(2477)</span> 
<span data-post-id="12320633" class="post-comment-count">评论(2)</span> 
<span data-post-id="12320633" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12320633" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2020/03/07.html">2020年3月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/11363487.html">
    <span>
        高性能内存队列Disruptor--原理分析
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1、起源 Disruptor最初由lmax.com开发，2010年在Qcon公开发表，并于2011年开源，其官网定义为：“High Performance Inter Thread Messaging Library”，即：线程间的高性能消息框架。其实JDK已经为我们提供了很多开箱即用的线程间通信的        <a href="https://www.cnblogs.com/ocean234/p/11363487.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-07 18:08
ocean.wen
<span data-post-id="11363487" class="post-view-count">阅读(976)</span> 
<span data-post-id="11363487" class="post-comment-count">评论(1)</span> 
<span data-post-id="11363487" class="post-digg-count">推荐(2)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11363487" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2019/10/08.html">2019年10月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/11606344.html">
    <span>
        Idea中Smart Tomcat插件启动报NullPointerException问题
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：如果你跟我一样用的是Idea Community社区版的话，也一定会遇到用Smart Tomcat插件启动报错的问题： 这个问题网上搜了一圈，大家好像也都遇到过了，不过也都没有找到原因和给出解决方案.....（郁闷中） 后来，，，发现在“Run/Debug Configurations”中重新选择下        <a href="https://www.cnblogs.com/ocean234/p/11606344.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-10-08 14:31
ocean.wen
<span data-post-id="11606344" class="post-view-count">阅读(2076)</span> 
<span data-post-id="11606344" class="post-comment-count">评论(0)</span> 
<span data-post-id="11606344" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11606344" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2019/09/16.html">2019年9月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/11525721.html">
    <span>
        Windows下jmap命令报错问题
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：问题： 最近换了笔记本，新的工作环境下jmap命令居然在报错，而jps、jstat、jinfo、jstack都能正常使用，所以初步排除进程号的问题。 Attaching to core 17536 from executable heap, please wait... Error attachin        <a href="https://www.cnblogs.com/ocean234/p/11525721.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-09-16 13:19
ocean.wen
<span data-post-id="11525721" class="post-view-count">阅读(3174)</span> 
<span data-post-id="11525721" class="post-comment-count">评论(1)</span> 
<span data-post-id="11525721" class="post-digg-count">推荐(1)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11525721" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2019/08/13.html">2019年8月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/11176954.html">
    <span>
        设计模式：单例的五种实现及分析
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;单例模式是设计模式中最简单的一种创建型模式，使用场景一般有：工具类对象、系统中只能存在一个实例对象的类、创建频繁或又耗时耗资源且又经常用到的对象等。如：JDK的Runtime类就是饥饿的单例模式，以及Spring容器管理的实例Bean默认也是饥饿单例，        <a href="https://www.cnblogs.com/ocean234/p/11176954.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-08-13 17:34
ocean.wen
<span data-post-id="11176954" class="post-view-count">阅读(299)</span> 
<span data-post-id="11176954" class="post-comment-count">评论(0)</span> 
<span data-post-id="11176954" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11176954" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2019/07/12.html">2019年7月12日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/11176459.html">
    <span>
        Java各版本新特性总结
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：&amp;nbsp;&amp;nbsp;&amp;nbsp;Java或者说JDK的更新一般分为两部分内容：Java语言、JVM（C、C++编写），但通常情况下都不会单独发布，因为新的语言特性需要特定的JVM支持才行。下面我总结了从古至今Java各版本的新特性，一起来见证Java的发展壮大和不断成长吧。 JDK Beta（1        <a href="https://www.cnblogs.com/ocean234/p/11176459.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-07-12 16:00
ocean.wen
<span data-post-id="11176459" class="post-view-count">阅读(2062)</span> 
<span data-post-id="11176459" class="post-comment-count">评论(0)</span> 
<span data-post-id="11176459" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11176459" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/ocean234/archive/2019/05/15.html">2019年5月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ocean234/p/10684928.html">
    <span>
        并发编程：synchronized 锁升级过程的验证
    </span>
    



</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;关于synchronized关键字以及偏向锁、轻量级锁、重量级锁的介绍广大网友已经给出了太多文章和例子，这里就不再重复了，也可点击 &quot;链接&quot; 来回顾一下。在这里来实战操作一把，验证JVM是怎么一步一步对锁进行升级的，这其中有很多值得思考的地方。 需要关        <a href="https://www.cnblogs.com/ocean234/p/10684928.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-05-15 21:11
ocean.wen
<span data-post-id="10684928" class="post-view-count">阅读(1781)</span> 
<span data-post-id="10684928" class="post-comment-count">评论(1)</span> 
<span data-post-id="10684928" class="post-digg-count">推荐(0)</span> 
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10684928" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/ocean234/default.html?page=2">
        下一页
    </a>

    </div>    
</div>






<script>
    updatePostStats(
        $(".post-view-count").map(function () { return this.dataset.postId }).get(),
        function(id, count) { $(".post-view-count[data-post-id=" + id + "]").text("阅读(" + count + ")") },
        function(id, count) { $(".post-comment-count[data-post-id=" + id + "]").text("评论(" + count + ")") },
        function(id, count) { $(".post-digg-count[data-post-id=" + id + "]").text("推荐(" + count + ")") });
</script>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 ocean.wen
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjt8sVFdd5KvYAhUP9Ey1WezH6wWRsHZ2cFvFxUhhcRButuK4HwUXZs9YPv832RU0JdpHUQ2WXXSjILl7_P58HVXdJomFTPntQMzVbImR24oivr7EbjZFdK3mI_rdTvQVVM" />
</body>
</html>
